// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package geoservice_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GeoProviderClient is the client API for GeoProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeoProviderClient interface {
	AddressSearch(ctx context.Context, in *AddressSearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	GeoSearch(ctx context.Context, in *GeoSearchRequest, opts ...grpc.CallOption) (*GeocodeResponse, error)
}

type geoProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewGeoProviderClient(cc grpc.ClientConnInterface) GeoProviderClient {
	return &geoProviderClient{cc}
}

func (c *geoProviderClient) AddressSearch(ctx context.Context, in *AddressSearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/geo.GeoProvider/AddressSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoProviderClient) GeoSearch(ctx context.Context, in *GeoSearchRequest, opts ...grpc.CallOption) (*GeocodeResponse, error) {
	out := new(GeocodeResponse)
	err := c.cc.Invoke(ctx, "/geo.GeoProvider/GeoSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoProviderServer is the server API for GeoProvider service.
// All implementations must embed UnimplementedGeoProviderServer
// for forward compatibility
type GeoProviderServer interface {
	AddressSearch(context.Context, *AddressSearchRequest) (*SearchResponse, error)
	GeoSearch(context.Context, *GeoSearchRequest) (*GeocodeResponse, error)
	mustEmbedUnimplementedGeoProviderServer()
}

// UnimplementedGeoProviderServer must be embedded to have forward compatible implementations.
type UnimplementedGeoProviderServer struct {
}

func (UnimplementedGeoProviderServer) AddressSearch(context.Context, *AddressSearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressSearch not implemented")
}
func (UnimplementedGeoProviderServer) GeoSearch(context.Context, *GeoSearchRequest) (*GeocodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeoSearch not implemented")
}
func (UnimplementedGeoProviderServer) mustEmbedUnimplementedGeoProviderServer() {}

// UnsafeGeoProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeoProviderServer will
// result in compilation errors.
type UnsafeGeoProviderServer interface {
	mustEmbedUnimplementedGeoProviderServer()
}

func RegisterGeoProviderServer(s *grpc.Server, srv GeoProviderServer) {
	s.RegisterService(&_GeoProvider_serviceDesc, srv)
}

func _GeoProvider_AddressSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoProviderServer).AddressSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geo.GeoProvider/AddressSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoProviderServer).AddressSearch(ctx, req.(*AddressSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoProvider_GeoSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeoSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoProviderServer).GeoSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geo.GeoProvider/GeoSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoProviderServer).GeoSearch(ctx, req.(*GeoSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GeoProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "geo.GeoProvider",
	HandlerType: (*GeoProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddressSearch",
			Handler:    _GeoProvider_AddressSearch_Handler,
		},
		{
			MethodName: "GeoSearch",
			Handler:    _GeoProvider_GeoSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geo_service/geo_service.proto",
}
